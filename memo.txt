
qiita案
リソース作成成功時、随時にqiitaも更新しておく
・organization
・tgw
・オンプレ擬態の環境
・ecs
・名前解決
・dumpファイルをオンプレに持っていきリストア

このそれぞれを、どの粒度で書いていくか
１ ファイル内1リソース定義ごとに書く ロジック一つずつ詳細に解説

２コードを全部貼り付け、各種設定値、ちゃんと作られているかのスクショ
コード貼り付けは、コメント行を多めに書く


for_eachは、mapかsetでしかできない。
map
"key" = "value"
この場合、each.keyとeach.valueが出る。

set
["1","2"]
listとsetの違いは、setは重複無。
この場合、each.keyしかない。

terraform記事
プログラミングは全くできないが、terraformをマスターする必要がある君へ
序章
resource "aws_organizations_account" "members" {
  for_each  = var.member_accounts
  name      = each.value.name
  email     = each.value.email
  role_name = OrganizationAccountAccessRole
  parent_id = local.ou_ids[lower(each.value.ou)] # ou情報は変数で与えられたOU名を元にローカルマップからIDを取得
  tags      = local.member_tags

  lifecycle { prevent_destroy = true }
  timeouts  { create = "2h" }
}

このような文をみて吐き気がでてしまう人向けです。
これさえ読めば、サードパーティーモジュールを使うときなど、ざっくりとは読めるようになります。
terraformで必要なのが、書けることではなく、コードリーディングを正確に行えるかどうかです。


１ 変数の流れをわかるようにする
２ループ処理を少しずつ分かるようにする→型をざっくりと理解する。
３よくつかう関数を理解する

ループには二つあります
１つはfor_each
１つはdynamic

型が、すべてをややこしくしています。
ざっくりと二つを覚えましょう。
一つはmap こいつが原因で





