# Terragrunt を使ったインフラ変更の PR を自動チェックするワークフロー
name: Terragrunt PR Checks

# どのイベントでワークフローを走らせるか、対象ファイルを指定
on:
  pull_request:
    # infra 配下などインフラ関連ファイルの変更だけに反応する
    paths:
      - 'infra/**'

# 後続ジョブが必要とする GitHub 権限を最小限に設定
permissions:
  contents: read
  pull-requests: write

# 複数ジョブで使う Terraform / Terragrunt のバージョンを共通化
env:
  TERRAFORM_VERSION: 1.9.0
  TERRAGRUNT_VERSION: v0.58.0

jobs:
  discover:
    # どの環境 (env/account) に変更があったかを特定してmatrixを組む
    name: Detect Changed Environments
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_changes: ${{ steps.set-matrix.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build Terragrunt matrix
        id: set-matrix
        env:
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.sha }}
        run: |
          set -eo pipefail
          python <<'PY'
          import json
          import os
          import subprocess
          from pathlib import Path

          base = os.environ.get('BASE_SHA', '').strip()
          head = os.environ.get('HEAD_SHA', '').strip()
          if not head:
              raise SystemExit('HEAD_SHA is required to compute diff')

          if not base:
              raise SystemExit('BASE_SHA is required to compute diff')

          diff_cmd = ['git', 'diff', '--name-only', base, head]
          files = subprocess.check_output(diff_cmd, text=True).splitlines()

          override_path = Path('.github/terragrunt-env-map.json')
          overrides = {}
          if override_path.exists():
              overrides = json.loads(override_path.read_text())

          seen = {}
          for path in files:
              if not path.startswith('infra/envs/'):
                  continue
              parts = path.split('/')
              if len(parts) < 4:
                  continue
              env_name, account = parts[2], parts[3]
              key = f"{env_name}/{account}"
              if key in seen:
                  continue
              meta = overrides.get(key, {})
              aws_profile = meta.get('aws_profile', account)
              aws_region = meta.get('aws_region')
              entry = {
                  'env': env_name,
                  'account': account,
                  'aws_profile': aws_profile,
                  'terragrunt_dir': f"infra/envs/{env_name}/{account}"
              }
              if aws_region:
                  entry['aws_region'] = aws_region
              seen[key] = entry

          matrix = sorted(seen.values(), key=lambda item: (item['env'], item['account']))

          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              fh.write(f"has_changes={'true' if matrix else 'false'}\n")
              fh.write('matrix=' + json.dumps({'include': matrix}) + '\n')
          PY

  terragrunt:
    # 変更があった環境ごとに Terragrunt の検証・プランを実行
    name: Terragrunt Checks
    runs-on: ubuntu-latest
    needs: discover
    if: needs.discover.outputs.has_changes == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.discover.outputs.matrix) }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.terragrunt_dir }}
    env:
      AWS_REGION: ${{ matrix.aws_region || 'ap-northeast-1' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Terraform / Terragrunt を再セットアップ (ジョブごとにクリーン環境)
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - uses: autero1/setup-terragrunt@v3
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1
        with:
          working_directory: ${{ matrix.terragrunt_dir }}
          additional_args: --force-all-dirs --minimum-severity MEDIUM
      # 実際に Terragrunt の plan を回して差分を確認
      - name: Terragrunt plan
        env:
          AWS_PROFILE: ${{ matrix.aws_profile }}
          AWS_REGION: ${{ matrix.aws_region || 'ap-northeast-1' }}
        run: |
          terragrunt run-all plan --terragrunt-non-interactive

  report:
    # 変更が無かった場合でもステータスを分かりやすく報告
    name: No-op Summary
    runs-on: ubuntu-latest
    needs: discover
    if: needs.discover.outputs.has_changes != 'true'
    steps:
      - name: Nothing to do
        run: echo "No infra/envs changes detected; skipping Terragrunt checks."
